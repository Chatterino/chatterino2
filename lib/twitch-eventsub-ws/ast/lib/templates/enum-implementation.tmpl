boost::json::result_for<{{enum.full_name}}, boost::json::value>::type tag_invoke(
    boost::json::try_value_to_tag<{{enum.full_name}}>, const boost::json::value &jvRoot)
{
    if (!jvRoot.is_string())
    {
        return error::detail::expectedString<"{{enum.full_name}}">();
    }
    std::string_view eString(jvRoot.get_string());

    using namespace std::string_view_literals;

{%- for constant in enum.constants %}
    if (eString == "{{constant.json_name}}"sv) {
        return {{enum.full_name}}::{{constant.name}};
    }
{%- endfor %}

    return error::detail::unknownEnumValue<"{{enum.full_name}}">();
}
