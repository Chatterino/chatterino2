{% if not field.tag -%}
static_assert(false, "{{field.name}} doesn't have a json_tag");
{%- endif %}
const auto *jv{{field.name}}Tag = root.if_contains("{{field.tag}}");
if (jv{{field.name}}Tag == nullptr)
{
    EVENTSUB_BAIL_HERE(error::Kind::FieldMissing);
}

auto {{field.name}}TagRes = jv{{field.name}}Tag->try_as_string();
if ({{field.name}}TagRes.has_error())
{
    return {{field.name}}TagRes.error();
}
std::string_view {{field.name}}Tag = *{{field.name}}TagRes;
decltype(std::declval<{{struct.full_name}}>().{{field.name}}) {{field.name}};
{%- for type in field.variant_types %}

{%- if not loop.first %}else{% endif %} if ({{field.name}}Tag == {{type.name}}::TAG)
{
{%- if type.empty -%}
    {{field.name}}.emplace<{{type.name}}>();
{%- else -%}
    auto {{field.name}}Val = root.try_at(detail::fieldFor<{{type.name}}>());
    if ({{field.name}}Val.has_error())
    {
        EVENTSUB_BAIL_HERE(error::Kind::FieldMissing);
    }
    auto {{field.name}}{{type.name}} = boost::json::try_value_to<{{type.name}}>(*{{field.name}}Val);
    if ({{field.name}}{{type.name}}.has_error())
    {
        return {{field.name}}{{type.name}}.error();
    }
    {% if type.trivial -%}
    {{field.name}}.emplace<{{type.name}}>({{field.name}}{{type.name}}.value());
    {%- else -%}
    {{field.name}}.emplace<{{type.name}}>(std::move({{field.name}}{{type.name}}.value()));
    {%- endif %}
{%- endif -%}
}
{%- endfor -%}
else
{
{%- if field.variant_fallback -%}
    {{field.name}}.emplace<{{field.variant_fallback}}>({{field.name}}Tag);
{%- else -%}
    EVENTSUB_BAIL_HERE(error::Kind::UnknownVariant);
{%- endif -%}
}
